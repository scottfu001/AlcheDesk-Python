# Generated by Django 3.2.3 on 2021-05-14 04:11

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Alias',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField(unique=True)),
                ('comment', models.TextField(blank=True, null=True)),
                ('updated_at', models.DateTimeField()),
                ('created_at', models.DateTimeField()),
                ('is_deleted', models.BooleanField()),
            ],
            options={
                'db_table': 'alias',
            },
        ),
        migrations.CreateModel(
            name='Application',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('comment', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('is_deleted', models.BooleanField()),
                ('log', models.TextField(blank=True, null=True)),
                ('parameter', models.JSONField()),
                ('version', models.TextField(blank=True, null=True)),
                ('copy_from_id', models.ForeignKey(blank=True, null=True,
                 on_delete=django.db.models.deletion.DO_NOTHING, to='api.application')),
            ],
            options={
                'db_table': 'application',
            },
        ),
        migrations.CreateModel(
            name='Color',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField(unique=True)),
            ],
            options={
                'db_table': 'color',
            },
        ),
        migrations.CreateModel(
            name='ContentArchive',
            fields=[
                ('content_type', models.TextField()),
                ('content_md5', models.TextField(
                    primary_key=True, serialize=False)),
                ('content_json', models.JSONField(unique=True)),
            ],
            options={
                'db_table': 'content_archive',
            },
        ),
        migrations.CreateModel(
            name='ContentType',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField(unique=True)),
            ],
            options={
                'db_table': 'content_type',
            },
        ),
        migrations.CreateModel(
            name='DevInstructionResult',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('action', models.TextField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('log', models.TextField(blank=True, null=True)),
                ('is_finished', models.BooleanField()),
                ('instruction', models.JSONField()),
                ('data', models.JSONField()),
                ('start_at', models.DateTimeField(blank=True, null=True)),
                ('end_at', models.DateTimeField(blank=True, null=True)),
                ('logical_order_index', models.CharField(
                    blank=True, max_length=20, null=True)),
                ('input_data', models.TextField(blank=True, null=True)),
                ('input_type', models.CharField(
                    blank=True, max_length=50, null=True)),
                ('input_parameter', models.JSONField()),
                ('output_data', models.TextField(blank=True, null=True)),
                ('output_type', models.CharField(
                    blank=True, max_length=50, null=True)),
                ('output_parameter', models.JSONField()),
                ('expected_value', models.TextField(blank=True, null=True)),
                ('return_value', models.TextField(blank=True, null=True)),
                ('is_overwrite', models.BooleanField(blank=True, null=True)),
                ('target', models.TextField(blank=True, null=True)),
                ('instruction_options', models.TextField(blank=True, null=True)),
                ('instruction_option_log', models.TextField(blank=True, null=True)),
                ('result_overwritten', models.IntegerField()),
                ('comment', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'dev_instruction_result',
            },
        ),
        migrations.CreateModel(
            name='DriverPack',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField(unique=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('execution_count', models.BigIntegerField()),
                ('comment', models.TextField(blank=True, null=True)),
                ('is_deleted', models.BooleanField()),
                ('log', models.TextField(blank=True, null=True)),
                ('is_default', models.BooleanField()),
                ('copy_from_id', models.ForeignKey(blank=True, null=True,
                 on_delete=django.db.models.deletion.DO_NOTHING, to='api.driverpack')),
            ],
            options={
                'db_table': 'driver_pack',
            },
        ),
        migrations.CreateModel(
            name='DriverType',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField(unique=True)),
                ('is_multiselectable', models.BooleanField()),
                ('is_active', models.BooleanField()),
                ('is_predefined', models.BooleanField()),
            ],
            options={
                'db_table': 'driver_type',
            },
        ),
        migrations.CreateModel(
            name='DriverTypeInstructionTypeLink',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('driver_type', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.drivertype')),
            ],
            options={
                'db_table': 'driver_type_instruction_type_link',
            },
        ),
        migrations.CreateModel(
            name='Element',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('comment', models.TextField(blank=True, null=True)),
                ('locator_value', models.TextField(blank=True, null=True)),
                ('html_position_x', models.TextField(blank=True, null=True)),
                ('html_position_y', models.TextField(blank=True, null=True)),
                ('is_deleted', models.BooleanField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('log', models.TextField(blank=True, null=True)),
                ('parameter', models.JSONField()),
                ('is_driver', models.BooleanField()),
                ('application', models.ForeignKey(blank=True, null=True,
                 on_delete=django.db.models.deletion.DO_NOTHING, to='api.application')),
                ('color', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.color')),
                ('copy_from_id', models.ForeignKey(blank=True, null=True,
                 on_delete=django.db.models.deletion.DO_NOTHING, to='api.element')),
            ],
            options={
                'db_table': 'element',
            },
        ),
        migrations.CreateModel(
            name='ElementLocatorType',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField(unique=True)),
                ('is_active', models.BooleanField()),
                ('is_predefined', models.BooleanField()),
            ],
            options={
                'db_table': 'element_locator_type',
            },
        ),
        migrations.CreateModel(
            name='ElementType',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField(unique=True)),
                ('is_active', models.BooleanField()),
                ('is_driver', models.BooleanField()),
            ],
            options={
                'db_table': 'element_type',
            },
        ),
        migrations.CreateModel(
            name='ElementTypeInstructionActionLink',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('element_type', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.elementtype')),
            ],
            options={
                'db_table': 'element_type_instruction_action_link',
            },
        ),
        migrations.CreateModel(
            name='EmailNotificationTarget',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('email_address', models.TextField()),
                ('comment', models.TextField(blank=True, null=True)),
                ('updated_at', models.DateTimeField()),
                ('created_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'email_notification_target',
            },
        ),
        migrations.CreateModel(
            name='FileType',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField(unique=True)),
                ('is_active', models.BooleanField()),
                ('is_predefined', models.BooleanField()),
            ],
            options={
                'db_table': 'file_type',
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField(unique=True)),
                ('is_predefined', models.BooleanField()),
                ('is_active', models.BooleanField()),
            ],
            options={
                'db_table': 'group',
            },
        ),
        migrations.CreateModel(
            name='Instruction',
            fields=[
                ('comment', models.TextField(blank=True, null=True)),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField()),
                ('created_at', models.DateTimeField()),
                ('input', models.TextField(blank=True, null=True)),
                ('is_deleted', models.BooleanField()),
                ('order_index', models.BigIntegerField()),
                ('log', models.TextField(blank=True, null=True)),
                ('data', models.JSONField()),
                ('step_description', models.TextField(blank=True, null=True)),
                ('expected_description', models.TextField(blank=True, null=True)),
                ('is_driver', models.BooleanField()),
                ('parameter', models.JSONField()),
                ('expected_value', models.TextField(blank=True, null=True)),
                ('resource_md5', models.CharField(
                    blank=True, max_length=32, null=True)),
                ('test_case_share_folder_id',
                 models.BigIntegerField(blank=True, null=True)),
                ('driver_alias', models.TextField(blank=True, null=True)),
                ('target', models.TextField(blank=True, null=True)),
                ('ref_test_case_overwrite_name',
                 models.TextField(blank=True, null=True)),
                ('application', models.ForeignKey(blank=True, null=True,
                 on_delete=django.db.models.deletion.DO_NOTHING, to='api.application')),
                ('color', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.color')),
                ('copy_from_id', models.ForeignKey(blank=True, null=True,
                 on_delete=django.db.models.deletion.DO_NOTHING, to='api.instruction')),
                ('driver_type', models.ForeignKey(blank=True, null=True,
                 on_delete=django.db.models.deletion.DO_NOTHING, to='api.drivertypeinstructiontypelink')),
                ('element', models.ForeignKey(blank=True, null=True,
                 on_delete=django.db.models.deletion.DO_NOTHING, to='api.element')),
                ('element_type', models.ForeignKey(blank=True, null=True,
                 on_delete=django.db.models.deletion.DO_NOTHING, to='api.elementtype')),
            ],
            options={
                'db_table': 'instruction',
            },
        ),
        migrations.CreateModel(
            name='InstructionAction',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField(unique=True)),
                ('is_active', models.BooleanField()),
                ('is_predefined', models.BooleanField()),
            ],
            options={
                'db_table': 'instruction_action',
            },
        ),
        migrations.CreateModel(
            name='InstructionBundle',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('comment', models.TextField()),
                ('is_deleted', models.BooleanField()),
            ],
            options={
                'db_table': 'instruction_bundle',
            },
        ),
        migrations.CreateModel(
            name='InstructionOption',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField(unique=True)),
                ('updated_at', models.DateTimeField()),
                ('created_at', models.DateTimeField()),
                ('is_predefined', models.BooleanField()),
                ('is_value_required', models.BooleanField()),
                ('comment', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField()),
            ],
            options={
                'db_table': 'instruction_option',
            },
        ),
        migrations.CreateModel(
            name='InstructionType',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField(unique=True)),
                ('is_active', models.BooleanField()),
                ('is_predefined', models.BooleanField()),
                ('is_driver', models.BooleanField()),
                ('is_element_required', models.BooleanField()),
                ('overridable_fields', models.TextField(blank=True, null=True)),
                ('driver_type', models.ForeignKey(blank=True, null=True,
                 on_delete=django.db.models.deletion.DO_NOTHING, to='api.drivertype')),
                ('virtual_element', models.ForeignKey(blank=True, null=True,
                 on_delete=django.db.models.deletion.DO_NOTHING, to='api.element')),
            ],
            options={
                'db_table': 'instruction_type',
                'unique_together': {('id', 'is_driver'), ('id', 'overridable_fields')},
            },
        ),
        migrations.CreateModel(
            name='LogLevel',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField(unique=True)),
            ],
            options={
                'db_table': 'log_level',
            },
        ),
        migrations.CreateModel(
            name='Module',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('version', models.TextField()),
                ('comment', models.TextField(blank=True, null=True)),
                ('updated_at', models.DateTimeField()),
                ('created_at', models.DateTimeField()),
                ('log', models.TextField(blank=True, null=True)),
                ('is_deleted', models.BooleanField()),
            ],
            options={
                'db_table': 'module',
                'unique_together': {('name', 'version')},
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('subject', models.TextField(blank=True, null=True)),
                ('messages', models.TextField(blank=True, null=True)),
                ('attachments', models.TextField(blank=True, null=True)),
                ('comment', models.TextField(blank=True, null=True)),
                ('log', models.TextField(blank=True, null=True)),
                ('updated_at', models.DateTimeField()),
                ('created_at', models.DateTimeField()),
                ('is_deleted', models.BooleanField()),
            ],
            options={
                'db_table': 'notification',
            },
        ),
        migrations.CreateModel(
            name='ParameterScript',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('type', models.TextField()),
                ('symbol', models.TextField()),
                ('script', models.TextField()),
            ],
            options={
                'db_table': 'parameter_script',
            },
        ),
        migrations.CreateModel(
            name='ProdInstructionResult',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('action', models.TextField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('log', models.TextField(blank=True, null=True)),
                ('is_finished', models.BooleanField()),
                ('instruction', models.JSONField()),
                ('data', models.JSONField()),
                ('start_at', models.DateTimeField(blank=True, null=True)),
                ('end_at', models.DateTimeField(blank=True, null=True)),
                ('logical_order_index', models.CharField(
                    blank=True, max_length=20, null=True)),
                ('input_data', models.TextField(blank=True, null=True)),
                ('input_type', models.CharField(
                    blank=True, max_length=50, null=True)),
                ('input_parameter', models.JSONField()),
                ('output_data', models.TextField(blank=True, null=True)),
                ('output_type', models.CharField(
                    blank=True, max_length=50, null=True)),
                ('output_parameter', models.JSONField()),
                ('expected_value', models.TextField(blank=True, null=True)),
                ('return_value', models.TextField(blank=True, null=True)),
                ('is_overwrite', models.BooleanField(blank=True, null=True)),
                ('target', models.TextField(blank=True, null=True)),
                ('instruction_options', models.TextField(blank=True, null=True)),
                ('instruction_option_log', models.TextField(blank=True, null=True)),
                ('result_overwritten', models.IntegerField()),
                ('comment', models.TextField(blank=True, null=True)),
                ('instruction_0', models.ForeignKey(blank=True, db_column='instruction_id', null=True,
                 on_delete=django.db.models.deletion.DO_NOTHING, to='api.instruction')),
            ],
            options={
                'db_table': 'prod_instruction_result',
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('comment', models.TextField(blank=True, null=True)),
                ('is_deleted', models.BooleanField()),
                ('log', models.TextField(blank=True, null=True)),
                ('version', models.TextField(blank=True, null=True)),
                ('copy_from_id', models.ForeignKey(blank=True, null=True,
                 on_delete=django.db.models.deletion.DO_NOTHING, to='api.project')),
            ],
            options={
                'db_table': 'project',
            },
        ),
        migrations.CreateModel(
            name='ProjectType',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField(unique=True)),
                ('is_active', models.BooleanField()),
            ],
            options={
                'db_table': 'project_type',
            },
        ),
        migrations.CreateModel(
            name='Property',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('key', models.TextField(unique=True)),
                ('value', models.TextField()),
                ('is_active', models.BooleanField()),
                ('is_predefined', models.BooleanField()),
            ],
            options={
                'db_table': 'property',
            },
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('path', models.TextField()),
                ('description', models.TextField(blank=True, null=True)),
                ('uuid', models.UUIDField(unique=True)),
                ('md5', models.CharField(max_length=32, unique=True)),
            ],
            options={
                'db_table': 'resource',
            },
        ),
        migrations.CreateModel(
            name='Run',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('log', models.TextField(blank=True, null=True)),
                ('is_finished', models.BooleanField()),
                ('test_case', models.JSONField()),
                ('parameter', models.JSONField()),
                ('start_at', models.DateTimeField(blank=True, null=True)),
                ('end_at', models.DateTimeField(blank=True, null=True)),
                ('priority', models.IntegerField()),
                ('timeout', models.IntegerField()),
                ('driver_pack', models.JSONField(blank=True, null=True)),
                ('driver_pack_id', models.BigIntegerField(blank=True, null=True)),
                ('is_recorded', models.BigIntegerField(blank=True, null=True)),
                ('test_case_overwrite', models.JSONField(blank=True, null=True)),
                ('test_case_overwrite_id',
                 models.BigIntegerField(blank=True, null=True)),
                ('trigger_source', models.TextField(blank=True, null=True)),
                ('drivers', models.JSONField(blank=True, null=True)),
                ('uuid', models.UUIDField()),
                ('test_case_uuid', models.UUIDField(blank=True, null=True)),
                ('singleton', models.BooleanField()),
                ('executable_instruction_number',
                 models.BigIntegerField(blank=True, null=True)),
                ('system_requirements', models.JSONField(blank=True, null=True)),
                ('system_requirement_pack_0', models.JSONField(
                    blank=True, db_column='system_requirement_pack', null=True)),
                ('run_set_test_case_link_id',
                 models.BigIntegerField(blank=True, null=True)),
                ('result_overwritten', models.IntegerField()),
                ('group', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.group')),
                ('project', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.project')),
            ],
            options={
                'db_table': 'run',
            },
        ),
        migrations.CreateModel(
            name='RunSet',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField(unique=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('comment', models.TextField(blank=True, null=True)),
                ('is_deleted', models.BooleanField()),
                ('log', models.TextField(blank=True, null=True)),
                ('priority', models.IntegerField()),
                ('uuid', models.UUIDField()),
                ('aliases', models.TextField(blank=True, null=True)),
                ('copy_from_id', models.ForeignKey(blank=True, null=True,
                 on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='api.runset')),
                ('group', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.group')),
                ('parent_id', models.ForeignKey(blank=True, null=True,
                 on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='api.runset')),
            ],
            options={
                'db_table': 'run_set',
            },
        ),
        migrations.CreateModel(
            name='RunSetResult',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('start_at', models.DateTimeField(blank=True, null=True)),
                ('end_at', models.DateTimeField(blank=True, null=True)),
                ('log', models.TextField()),
                ('priority', models.IntegerField()),
                ('is_finished', models.BooleanField()),
                ('comment', models.TextField(blank=True, null=True)),
                ('run', models.JSONField(blank=True, null=True)),
                ('uuid', models.UUIDField()),
                ('total_run_number', models.IntegerField()),
                ('passed_run_number', models.IntegerField()),
                ('failed_run_number', models.IntegerField()),
                ('run_ids', models.TextField()),
                ('passed_run_ids', models.TextField()),
                ('failed_run_ids', models.TextField()),
                ('group', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.group')),
                ('run_set', models.ForeignKey(blank=True, null=True,
                 on_delete=django.db.models.deletion.DO_NOTHING, to='api.runset')),
            ],
            options={
                'db_table': 'run_set_result',
            },
        ),
        migrations.CreateModel(
            name='RunSetType',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField(unique=True)),
                ('is_predefined', models.BooleanField()),
                ('is_active', models.BooleanField()),
            ],
            options={
                'db_table': 'run_set_type',
            },
        ),
        migrations.CreateModel(
            name='RunType',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField(unique=True)),
                ('is_active', models.BooleanField()),
                ('is_predefined', models.BooleanField()),
            ],
            options={
                'db_table': 'run_type',
            },
        ),
        migrations.CreateModel(
            name='SourceType',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('is_predefined', models.BooleanField()),
                ('is_active', models.BooleanField()),
            ],
            options={
                'db_table': 'source_type',
            },
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField(unique=True)),
                ('is_active', models.BooleanField()),
                ('is_predefined', models.BooleanField()),
            ],
            options={
                'db_table': 'status',
            },
        ),
        migrations.CreateModel(
            name='StepLogType',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField(unique=True)),
                ('is_active', models.BooleanField()),
                ('is_predefined', models.BooleanField()),
            ],
            options={
                'db_table': 'step_log_type',
            },
        ),
        migrations.CreateModel(
            name='SystemRequirementPack',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('execution_count', models.BigIntegerField()),
                ('comment', models.TextField(blank=True, null=True)),
                ('is_deleted', models.BooleanField()),
                ('log', models.TextField(blank=True, null=True)),
                ('is_default', models.BooleanField()),
                ('copy_from_id', models.ForeignKey(blank=True, null=True,
                 on_delete=django.db.models.deletion.DO_NOTHING, to='api.systemrequirementpack')),
            ],
            options={
                'db_table': 'system_requirement_pack',
            },
        ),
        migrations.CreateModel(
            name='SystemRequirementType',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField(unique=True)),
                ('is_multiselectable', models.BooleanField()),
                ('is_active', models.BooleanField()),
                ('is_predefined', models.BooleanField()),
            ],
            options={
                'db_table': 'system_requirement_type',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('comment', models.TextField(blank=True, null=True)),
                ('updated_at', models.DateTimeField()),
                ('created_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'tag',
            },
        ),
        migrations.CreateModel(
            name='Template',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField(unique=True)),
                ('type', models.TextField()),
                ('content', models.TextField()),
                ('updated_at', models.DateTimeField()),
                ('created_at', models.DateTimeField()),
                ('log', models.TextField(blank=True, null=True)),
                ('mode', models.TextField()),
                ('is_deleted', models.BooleanField()),
            ],
            options={
                'db_table': 'template',
            },
        ),
        migrations.CreateModel(
            name='Tenant',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('username', models.TextField()),
                ('uuid', models.UUIDField(unique=True)),
                ('account_uuid', models.UUIDField()),
            ],
            options={
                'db_table': 'tenant',
            },
        ),
        migrations.CreateModel(
            name='TestCase',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('is_flagged', models.BooleanField()),
                ('comment', models.TextField(blank=True, null=True)),
                ('log', models.TextField(blank=True, null=True)),
                ('is_deleted', models.BooleanField()),
                ('priority', models.IntegerField()),
                ('timeout', models.IntegerField()),
                ('resource_md5', models.CharField(
                    blank=True, max_length=32, null=True)),
                ('parameter', models.TextField(blank=True, null=True)),
                ('uuid', models.UUIDField()),
                ('singleton', models.BooleanField()),
                ('project_name', models.TextField()),
                ('copy_from_id', models.ForeignKey(blank=True, null=True,
                 on_delete=django.db.models.deletion.DO_NOTHING, to='api.testcase')),
                ('group', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.group')),
                ('project', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.project')),
                ('ref_run_set', models.ForeignKey(blank=True, null=True,
                 on_delete=django.db.models.deletion.DO_NOTHING, to='api.runset')),
            ],
            options={
                'db_table': 'test_case',
            },
        ),
        migrations.CreateModel(
            name='TestCaseOption',
            fields=[
                ('name', models.TextField(unique=True)),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField()),
                ('created_at', models.DateTimeField()),
                ('comment', models.TextField(blank=True, null=True)),
                ('is_value_required', models.BooleanField()),
                ('is_active', models.BooleanField()),
                ('is_predefined', models.BooleanField()),
            ],
            options={
                'db_table': 'test_case_option',
            },
        ),
        migrations.CreateModel(
            name='TestCaseShareFolder',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField(unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('updated_at', models.DateTimeField()),
                ('created_at', models.DateTimeField()),
                ('is_deleted', models.BooleanField()),
                ('log', models.TextField(blank=True, null=True)),
                ('comment', models.TextField(blank=True, null=True)),
                ('copy_from_id', models.ForeignKey(blank=True, null=True,
                 on_delete=django.db.models.deletion.DO_NOTHING, to='api.testcasesharefolder')),
            ],
            options={
                'db_table': 'test_case_share_folder',
                'unique_together': {('id', 'name')},
            },
        ),
        migrations.CreateModel(
            name='TestCaseType',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField(unique=True)),
                ('is_predefined', models.BooleanField()),
                ('is_active', models.BooleanField()),
            ],
            options={
                'db_table': 'test_case_type',
            },
        ),
        migrations.CreateModel(
            name='UserActivityLog',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('user_uuid', models.UUIDField()),
                ('activity_uuid', models.UUIDField()),
                ('target_model', models.CharField(max_length=255)),
                ('action_name', models.CharField(max_length=255)),
                ('input', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('user_name', models.TextField()),
            ],
            options={
                'db_table': 'user_activity_log',
            },
        ),
        migrations.CreateModel(
            name='InstructionOptionMap',
            fields=[
                ('instruction_option', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING,
                 primary_key=True, serialize=False, to='api.instructionoption')),
                ('instruction_action_ids', models.TextField()),
                ('element_type_ids', models.TextField()),
            ],
            options={
                'db_table': 'instruction_option_map',
            },
        ),
        migrations.CreateModel(
            name='ProjectExecutionInfo',
            fields=[
                ('project', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING,
                 primary_key=True, serialize=False, to='api.project')),
                ('project_name', models.TextField()),
                ('project_created_at', models.DateTimeField()),
                ('project_updated_at', models.DateTimeField()),
                ('active_test_case_number', models.IntegerField()),
                ('executed_test_case_number', models.IntegerField()),
                ('active_test_case_ids', models.TextField()),
                ('executed_test_case_ids', models.TextField()),
                ('passed_test_case_ids', models.TextField()),
                ('passed_test_case_number', models.IntegerField()),
                ('total_test_case_number', models.IntegerField()),
                ('test_case_ids', models.TextField()),
                ('project_is_deleted', models.BooleanField()),
            ],
            options={
                'db_table': 'project_execution_info',
            },
        ),
        migrations.CreateModel(
            name='ProjectReportInfo',
            fields=[
                ('project', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING,
                 primary_key=True, serialize=False, to='api.project')),
                ('project_name', models.TextField()),
                ('project_created_at', models.DateTimeField()),
                ('active_test_case_number', models.IntegerField()),
                ('total_run_number', models.BigIntegerField()),
                ('total_execution_time', models.BigIntegerField()),
                ('executed_test_case_number', models.IntegerField()),
                ('failed_test_case_number', models.IntegerField()),
                ('passed_test_case_number', models.IntegerField()),
                ('pass_rate', models.DecimalField(decimal_places=2, max_digits=5)),
                ('fail_rate', models.DecimalField(decimal_places=2, max_digits=5)),
                ('total_test_case_number', models.IntegerField()),
            ],
            options={
                'db_table': 'project_report_info',
            },
        ),
        migrations.CreateModel(
            name='TestCaseTaskLink',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('task_uuid', models.UUIDField(unique=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('test_case_uuid', models.UUIDField(blank=True, null=True)),
                ('test_case', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.testcase')),
            ],
            options={
                'db_table': 'test_case_task_link',
            },
        ),
        migrations.CreateModel(
            name='TestCaseOverwrite',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('is_deleted', models.BooleanField()),
                ('comment', models.TextField(blank=True, null=True)),
                ('log', models.TextField(blank=True, null=True)),
                ('copy_from_id', models.ForeignKey(blank=True, null=True,
                 on_delete=django.db.models.deletion.DO_NOTHING, to='api.testcaseoverwrite')),
                ('test_case', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.testcase')),
            ],
            options={
                'db_table': 'test_case_overwrite',
                'unique_together': {('test_case', 'name'), ('id', 'test_case')},
            },
        ),
        migrations.CreateModel(
            name='TestCaseOptionEntry',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('value', models.TextField(blank=True, null=True)),
                ('is_value_required', models.BooleanField()),
                ('name', models.ForeignKey(db_column='name',
                 on_delete=django.db.models.deletion.DO_NOTHING, to='api.testcaseoption')),
                ('test_case', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.testcase')),
            ],
            options={
                'db_table': 'test_case_option_entry',
            },
        ),
        migrations.CreateModel(
            name='TestCaseInstructionTypeMap',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('instruction_types', models.TextField()),
                ('test_case', models.OneToOneField(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.testcase')),
            ],
            options={
                'db_table': 'test_case_instruction_type_map',
            },
        ),
        migrations.CreateModel(
            name='TestCaseExecutionInfo',
            fields=[
                ('test_case_id', models.BigIntegerField(
                    primary_key=True, serialize=False)),
                ('test_case_name', models.TextField()),
                ('test_case_created_at', models.DateTimeField()),
                ('total_run_count', models.BigIntegerField()),
                ('latest_run_status_id', models.BigIntegerField(blank=True, null=True)),
                ('latest_run_updated_at', models.DateTimeField(blank=True, null=True)),
                ('latest_run_instruction_executed_count',
                 models.BigIntegerField(blank=True, null=True)),
                ('latest_run_instruction_pass_count',
                 models.BigIntegerField(blank=True, null=True)),
                ('latest_run_trigger_source',
                 models.TextField(blank=True, null=True)),
                ('latest_run_created_at', models.DateTimeField(blank=True, null=True)),
                ('latest_run_executable_instruction_number',
                 models.BigIntegerField(blank=True, null=True)),
                ('total_dev_run_count', models.BigIntegerField(blank=True, null=True)),
                ('latest_dev_run_status_id',
                 models.BigIntegerField(blank=True, null=True)),
                ('latest_dev_run_updated_at',
                 models.DateTimeField(blank=True, null=True)),
                ('latest_dev_run_instruction_executed_count',
                 models.BigIntegerField(blank=True, null=True)),
                ('latest_dev_run_instruction_pass_count',
                 models.BigIntegerField(blank=True, null=True)),
                ('latest_dev_run_trigger_source',
                 models.TextField(blank=True, null=True)),
                ('latest_dev_run_created_at',
                 models.DateTimeField(blank=True, null=True)),
                ('latest_dev_run_executable_instruction_number',
                 models.BigIntegerField(blank=True, null=True)),
                ('latest_run_instruction_fail_count', models.IntegerField()),
                ('test_case_is_deleted', models.BooleanField()),
                ('test_case_project_id', models.BigIntegerField()),
                ('latest_dev_run', models.ForeignKey(blank=True, null=True,
                 on_delete=django.db.models.deletion.DO_NOTHING, related_name='latest_dev_run', to='api.run')),
                ('latest_run', models.ForeignKey(blank=True, null=True,
                 on_delete=django.db.models.deletion.DO_NOTHING, related_name='latest_run', to='api.run')),
            ],
            options={
                'db_table': 'test_case_execution_info',
            },
        ),
        migrations.CreateModel(
            name='TestCaseDriverTypeMap',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('driver_types', models.TextField()),
                ('test_case', models.OneToOneField(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.testcase')),
            ],
            options={
                'db_table': 'test_case_driver_type_map',
            },
        ),
        migrations.CreateModel(
            name='TestCaseDriverAliasMap',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('driver_aliases', models.TextField()),
                ('test_case', models.OneToOneField(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.testcase')),
            ],
            options={
                'db_table': 'test_case_driver_alias_map',
            },
        ),
        migrations.AddField(
            model_name='testcase',
            name='test_case_type',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.DO_NOTHING, to='api.testcasetype'),
        ),
        migrations.CreateModel(
            name='SystemRequirement',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField(unique=True)),
                ('comment', models.TextField(blank=True, null=True)),
                ('is_predefined', models.BooleanField()),
                ('value', models.BigIntegerField()),
                ('system_requirement_type', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.systemrequirementtype')),
            ],
            options={
                'db_table': 'system_requirement',
                'unique_together': {('id', 'system_requirement_type')},
            },
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('comment', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('is_deleted', models.BooleanField()),
                ('log', models.TextField(blank=True, null=True)),
                ('application', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.application')),
                ('copy_from_id', models.ForeignKey(blank=True, null=True,
                 on_delete=django.db.models.deletion.DO_NOTHING, to='api.section')),
                ('project', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.project')),
            ],
            options={
                'db_table': 'section',
                'unique_together': {('name', 'application'), ('id', 'name')},
            },
        ),
        migrations.CreateModel(
            name='RunTaskLink',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('task_uuid', models.UUIDField(unique=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('run_uuid', models.UUIDField()),
                ('run', models.OneToOneField(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.run')),
            ],
            options={
                'db_table': 'run_task_link',
            },
        ),
        migrations.CreateModel(
            name='RunSetResultJobLink',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('job_uuid', models.UUIDField(unique=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('run_set_result_uuid', models.UUIDField(blank=True, null=True)),
                ('run_set_result', models.OneToOneField(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.runsetresult')),
            ],
            options={
                'db_table': 'run_set_result_job_link',
            },
        ),
        migrations.AddField(
            model_name='runsetresult',
            name='run_set_type',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.DO_NOTHING, to='api.runsettype'),
        ),
        migrations.AddField(
            model_name='runsetresult',
            name='run_type',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.DO_NOTHING, to='api.runtype'),
        ),
        migrations.AddField(
            model_name='runsetresult',
            name='source_type',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.DO_NOTHING, to='api.sourcetype'),
        ),
        migrations.AddField(
            model_name='runsetresult',
            name='status',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.DO_NOTHING, to='api.status'),
        ),
        migrations.CreateModel(
            name='RunSetJobLink',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('job_uuid', models.UUIDField(unique=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('run_set_uuid', models.UUIDField(blank=True, null=True)),
                ('run_set', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.runset')),
            ],
            options={
                'db_table': 'run_set_job_link',
            },
        ),
        migrations.CreateModel(
            name='RunSetAliasNameMap',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('alias_names', models.TextField()),
                ('run_set', models.OneToOneField(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.runset')),
            ],
            options={
                'db_table': 'run_set_alias_name_map',
            },
        ),
        migrations.AddField(
            model_name='runset',
            name='run_set_type',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.DO_NOTHING, to='api.runsettype'),
        ),
        migrations.AddField(
            model_name='run',
            name='run_set_result',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                    related_name='run_set_result', to='api.runsetresult'),
        ),
        migrations.AddField(
            model_name='run',
            name='run_type',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.DO_NOTHING, to='api.runtype'),
        ),
        migrations.AddField(
            model_name='run',
            name='status',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.DO_NOTHING, to='api.status'),
        ),
        migrations.AddField(
            model_name='run',
            name='system_requirement_pack',
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.systemrequirementpack'),
        ),
        migrations.AddField(
            model_name='run',
            name='test_case_0',
            field=models.ForeignKey(
                db_column='test_case_id', on_delete=django.db.models.deletion.DO_NOTHING, to='api.testcase'),
        ),
        migrations.AddField(
            model_name='project',
            name='project_type',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.DO_NOTHING, to='api.projecttype'),
        ),
        migrations.CreateModel(
            name='ProdStepLog',
            fields=[
                ('message', models.TextField()),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField()),
                ('created_at', models.DateTimeField()),
                ('instruction_result', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.prodinstructionresult')),
                ('run_type', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.runtype')),
                ('step_log_type', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.steplogtype')),
            ],
            options={
                'db_table': 'prod_step_log',
            },
        ),
        migrations.AddField(
            model_name='prodinstructionresult',
            name='run',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.DO_NOTHING, to='api.run'),
        ),
        migrations.AddField(
            model_name='prodinstructionresult',
            name='run_type',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.DO_NOTHING, to='api.runtype'),
        ),
        migrations.AddField(
            model_name='prodinstructionresult',
            name='status',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.DO_NOTHING, to='api.status'),
        ),
        migrations.CreateModel(
            name='ProdFile',
            fields=[
                ('name', models.TextField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('uuid', models.UUIDField()),
                ('parameter', models.JSONField()),
                ('uri', models.TextField(blank=True, null=True)),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('file_type', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.filetype')),
                ('instruction_result', models.ForeignKey(blank=True, null=True,
                 on_delete=django.db.models.deletion.DO_NOTHING, to='api.prodinstructionresult')),
                ('run', models.ForeignKey(blank=True, null=True,
                 on_delete=django.db.models.deletion.DO_NOTHING, to='api.run')),
                ('run_type', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.runtype')),
            ],
            options={
                'db_table': 'prod_file',
            },
        ),
        migrations.CreateModel(
            name='ProdExecutionLog',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('message', models.TextField()),
                ('updated_at', models.DateTimeField()),
                ('created_at', models.DateTimeField()),
                ('instruction_result', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.prodinstructionresult')),
                ('log_level', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.loglevel')),
                ('run', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.run')),
                ('run_type', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.runtype')),
            ],
            options={
                'db_table': 'prod_execution_log',
            },
        ),
        migrations.CreateModel(
            name='InstructionTypeInstructionActionLink',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('instruction_action', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.instructionaction')),
                ('instruction_type', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.instructiontype')),
            ],
            options={
                'db_table': 'instruction_type_instruction_action_link',
                'unique_together': {('instruction_type', 'instruction_action')},
            },
        ),
        migrations.CreateModel(
            name='InstructionOptionEntry',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('value', models.TextField(blank=True, null=True)),
                ('is_value_required', models.BooleanField()),
                ('instruction', models.OneToOneField(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.instruction')),
                ('name', models.ForeignKey(db_column='name',
                 on_delete=django.db.models.deletion.DO_NOTHING, to='api.instructionoption')),
            ],
            options={
                'db_table': 'instruction_option_entry',
            },
        ),
        migrations.CreateModel(
            name='InstructionBundleEntry',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('comment', models.TextField()),
                ('instruction_type_id', models.BigIntegerField(blank=True, null=True)),
                ('order_index', models.BigIntegerField()),
                ('is_deleted', models.BooleanField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('element_type', models.ForeignKey(blank=True, null=True,
                 on_delete=django.db.models.deletion.DO_NOTHING, to='api.elementtypeinstructionactionlink')),
                ('instruction_action', models.ForeignKey(blank=True, null=True,
                 on_delete=django.db.models.deletion.DO_NOTHING, to='api.instructiontypeinstructionactionlink')),
                ('instruction_bundle', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.instructionbundle')),
            ],
            options={
                'db_table': 'instruction_bundle_entry',
            },
        ),
        migrations.AddField(
            model_name='instruction',
            name='instruction_action',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                    to='api.instructiontypeinstructionactionlink'),
        ),
        migrations.AddField(
            model_name='instruction',
            name='instruction_type',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.DO_NOTHING, to='api.instructiontype'),
        ),
        migrations.AddField(
            model_name='instruction',
            name='project',
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.project'),
        ),
        migrations.AddField(
            model_name='instruction',
            name='ref_test_case',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                    related_name='ref_test_case', to='api.testcase'),
        ),
        migrations.AddField(
            model_name='instruction',
            name='ref_test_case_overwrite',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                    related_name='ref_test_case_overwrite', to='api.testcaseoverwrite'),
        ),
        migrations.AddField(
            model_name='instruction',
            name='section',
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.section'),
        ),
        migrations.AddField(
            model_name='instruction',
            name='test_case',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING,
                                    related_name='test_case', to='api.testcase'),
        ),
        migrations.AddField(
            model_name='elementtypeinstructionactionlink',
            name='instruction_action',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.DO_NOTHING, to='api.instructionaction'),
        ),
        migrations.CreateModel(
            name='ElementTypeElementLocatorTypeLink',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('element_locator_type', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.elementlocatortype')),
                ('element_type', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.elementtype')),
            ],
            options={
                'db_table': 'element_type_element_locator_type_link',
                'unique_together': {('element_type', 'element_locator_type')},
            },
        ),
        migrations.AddField(
            model_name='element',
            name='element_locator_type',
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.elementlocatortype'),
        ),
        migrations.AddField(
            model_name='element',
            name='element_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING,
                                    to='api.elementtypeelementlocatortypelink'),
        ),
        migrations.AddField(
            model_name='element',
            name='project',
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.project'),
        ),
        migrations.AddField(
            model_name='element',
            name='section',
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.section'),
        ),
        migrations.CreateModel(
            name='DriverVendor',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('version', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField()),
                ('is_predefined', models.BooleanField()),
                ('driver_type', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.drivertype')),
            ],
            options={
                'db_table': 'driver_vendor',
                'unique_together': {('name', 'driver_type', 'version')},
            },
        ),
        migrations.AddField(
            model_name='drivertypeinstructiontypelink',
            name='instruction_type',
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.DO_NOTHING, to='api.instructiontype'),
        ),
        migrations.CreateModel(
            name='DriverProperty',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('default_value', models.TextField()),
                ('default_action', models.TextField()),
                ('description', models.TextField()),
                ('value_type', models.TextField()),
                ('is_predefined_value_required', models.BooleanField()),
                ('is_active', models.BooleanField()),
                ('is_predefined', models.BooleanField()),
                ('driver_vendor', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.drivervendor')),
            ],
            options={
                'db_table': 'driver_property',
                'unique_together': {('name', 'driver_vendor')},
            },
        ),
        migrations.CreateModel(
            name='DriverPackDriverTypeMap',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('driver_types', models.TextField()),
                ('driver_pack', models.OneToOneField(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.driverpack')),
            ],
            options={
                'db_table': 'driver_pack_driver_type_map',
            },
        ),
        migrations.CreateModel(
            name='DriverPackDriverAliasMap',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('driver_aliases', models.TextField()),
                ('driver_pack', models.OneToOneField(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.driverpack')),
            ],
            options={
                'db_table': 'driver_pack_driver_alias_map',
            },
        ),
        migrations.CreateModel(
            name='Driver',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('comment', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField()),
                ('updated_at', models.DateTimeField()),
                ('created_at', models.DateTimeField()),
                ('is_default', models.BooleanField()),
                ('parameter', models.JSONField()),
                ('version', models.TextField(blank=True, null=True)),
                ('property', models.JSONField()),
                ('is_predefined', models.BooleanField()),
                ('execution_count', models.BigIntegerField()),
                ('log', models.TextField(blank=True, null=True)),
                ('resource_md5', models.CharField(
                    blank=True, max_length=32, null=True)),
                ('copy_from_id', models.ForeignKey(blank=True, null=True,
                 on_delete=django.db.models.deletion.DO_NOTHING, to='api.driver')),
                ('driver_type', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.drivertype')),
                ('vendor_name', models.ForeignKey(db_column='vendor_name',
                 on_delete=django.db.models.deletion.DO_NOTHING, to='api.drivervendor')),
            ],
            options={
                'db_table': 'driver',
            },
        ),
        migrations.CreateModel(
            name='DevStepLog',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('message', models.TextField()),
                ('updated_at', models.DateTimeField()),
                ('created_at', models.DateTimeField()),
                ('instruction_result', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.devinstructionresult')),
                ('run_type', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.runtype')),
                ('step_log_type', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.steplogtype')),
            ],
            options={
                'db_table': 'dev_step_log',
            },
        ),
        migrations.AddField(
            model_name='devinstructionresult',
            name='instruction_0',
            field=models.ForeignKey(blank=True, db_column='instruction_id', null=True,
                                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.instruction'),
        ),
        migrations.AddField(
            model_name='devinstructionresult',
            name='run',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.DO_NOTHING, to='api.run'),
        ),
        migrations.AddField(
            model_name='devinstructionresult',
            name='run_type',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.DO_NOTHING, to='api.runtype'),
        ),
        migrations.AddField(
            model_name='devinstructionresult',
            name='status',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.DO_NOTHING, to='api.status'),
        ),
        migrations.CreateModel(
            name='DevFile',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('uuid', models.UUIDField()),
                ('parameter', models.JSONField()),
                ('uri', models.TextField(blank=True, null=True)),
                ('file_type', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.filetype')),
                ('instruction_result', models.ForeignKey(blank=True, null=True,
                 on_delete=django.db.models.deletion.DO_NOTHING, to='api.devinstructionresult')),
                ('run', models.ForeignKey(blank=True, null=True,
                 on_delete=django.db.models.deletion.DO_NOTHING, to='api.run')),
                ('run_type', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.runtype')),
            ],
            options={
                'db_table': 'dev_file',
            },
        ),
        migrations.CreateModel(
            name='DevExecutionLog',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('message', models.TextField()),
                ('updated_at', models.DateTimeField()),
                ('created_at', models.DateTimeField()),
                ('instruction_result', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.devinstructionresult')),
                ('log_level', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.loglevel')),
                ('run', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.run')),
                ('run_type', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.runtype')),
            ],
            options={
                'db_table': 'dev_execution_log',
            },
        ),
        migrations.AddField(
            model_name='application',
            name='project',
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.project'),
        ),
        migrations.CreateModel(
            name='UserContent',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('content_uuid', models.UUIDField(
                    blank=True, null=True, unique=True)),
                ('sha256', models.TextField(blank=True, null=True)),
                ('original_name', models.TextField()),
                ('modified_name', models.TextField(blank=True, null=True)),
                ('version', models.TextField(blank=True, null=True)),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('path', models.TextField()),
                ('content_type', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.contenttype')),
            ],
            options={
                'db_table': 'user_content',
                'unique_together': {('sha256', 'original_name')},
            },
        ),
        migrations.CreateModel(
            name='TestCaseTagLink',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('tag', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.tag')),
                ('test_case', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.testcase')),
            ],
            options={
                'db_table': 'test_case_tag_link',
                'unique_together': {('test_case', 'tag')},
            },
        ),
        migrations.CreateModel(
            name='TestCaseShareFolderTestCaseLink',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('test_case', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.testcase')),
                ('test_case_share_folder', models.ForeignKey(blank=True, null=True,
                 on_delete=django.db.models.deletion.DO_NOTHING, to='api.testcasesharefolder')),
            ],
            options={
                'db_table': 'test_case_share_folder_test_case_link',
                'unique_together': {('test_case', 'test_case_share_folder')},
            },
        ),
        migrations.CreateModel(
            name='TestCaseModuleLink',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('module', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.module')),
                ('test_case', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.testcase')),
            ],
            options={
                'db_table': 'test_case_module_link',
                'unique_together': {('test_case', 'module')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='testcase',
            unique_together={('id', 'uuid'), ('id', 'name'),
                             ('name', 'project')},
        ),
        migrations.CreateModel(
            name='SystemRequirementPackSystemRequirementLink',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('system_requirement_type_id', models.BigIntegerField()),
                ('system_requirement', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.systemrequirement')),
                ('system_requirement_pack', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.systemrequirementpack')),
            ],
            options={
                'db_table': 'system_requirement_pack_system_requirement_link',
                'unique_together': {('system_requirement_pack', 'system_requirement'), ('system_requirement_pack', 'system_requirement_type_id')},
            },
        ),
        migrations.CreateModel(
            name='RunSetTestCaseLink',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('synchronize', models.BooleanField()),
                ('driver_pack', models.ForeignKey(blank=True, null=True,
                 on_delete=django.db.models.deletion.DO_NOTHING, to='api.driverpack')),
                ('ref_run_set', models.ForeignKey(blank=True, null=True,
                 on_delete=django.db.models.deletion.DO_NOTHING, related_name='ref_run_set', to='api.runset')),
                ('run_set', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING,
                 related_name='run_set', to='api.runset')),
                ('system_requirement_pack', models.ForeignKey(blank=True, null=True,
                 on_delete=django.db.models.deletion.DO_NOTHING, to='api.systemrequirementpack')),
                ('test_case', models.ForeignKey(blank=True, null=True,
                 on_delete=django.db.models.deletion.DO_NOTHING, to='api.testcase')),
                ('test_case_overwrite', models.ForeignKey(blank=True, null=True,
                 on_delete=django.db.models.deletion.DO_NOTHING, to='api.testcaseoverwrite')),
            ],
            options={
                'db_table': 'run_set_test_case_link',
                'unique_together': {('run_set', 'test_case', 'driver_pack'), ('run_set', 'test_case'), ('run_set', 'test_case', 'test_case_overwrite'), ('run_set', 'ref_run_set'), ('run_set', 'test_case', 'driver_pack', 'test_case_overwrite')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='runsetresult',
            unique_together={('id', 'uuid')},
        ),
        migrations.CreateModel(
            name='RunSetNotificationLink',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('notification', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.notification')),
                ('run_set', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.runset')),
            ],
            options={
                'db_table': 'run_set_notification_link',
                'unique_together': {('run_set', 'notification')},
            },
        ),
        migrations.CreateModel(
            name='RunSetAliasLink',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('alias', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.alias')),
                ('run_set', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.runset')),
            ],
            options={
                'db_table': 'run_set_alias_link',
                'unique_together': {('run_set', 'alias')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='runset',
            unique_together={('id', 'uuid')},
        ),
        migrations.CreateModel(
            name='RunExecutionInfo',
            fields=[
                ('run', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING,
                 primary_key=True, serialize=False, to='api.run')),
                ('run_name', models.TextField()),
                ('run_type_id', models.BigIntegerField()),
                ('run_status_id', models.BigIntegerField(blank=True, null=True)),
                ('run_created_at', models.DateTimeField()),
                ('run_updated_at', models.DateTimeField(blank=True, null=True)),
                ('test_case_id', models.BigIntegerField()),
                ('run_set_result_id', models.BigIntegerField(blank=True, null=True)),
                ('executable_instruction_number', models.IntegerField()),
                ('instruction_executed_count', models.BigIntegerField()),
                ('instruction_pass_count', models.BigIntegerField()),
                ('trigger_source', models.TextField(blank=True, null=True)),
                ('driver_pack_md5', models.UUIDField(blank=True, null=True)),
                ('test_case_overwrite_md5', models.UUIDField(blank=True, null=True)),
                ('test_case_md5', models.UUIDField(blank=True, null=True)),
                ('run_group_id', models.BigIntegerField()),
                ('driver_pack_name', models.TextField(blank=True, null=True)),
                ('test_case_overwrite_name', models.TextField(blank=True, null=True)),
                ('test_case_name', models.TextField(blank=True, null=True)),
                ('run_priority', models.BigIntegerField(blank=True, null=True)),
                ('run_result_overwritten', models.IntegerField()),
                ('instruction_fail_count', models.IntegerField()),
                ('is_finished', models.BooleanField()),
                ('run_start_at', models.DateTimeField(blank=True, null=True)),
                ('run_end_at', models.DateTimeField(blank=True, null=True)),
                ('duration', models.BigIntegerField()),
                ('run_project', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.project')),
            ],
            options={
                'db_table': 'run_execution_info',
            },
        ),
        migrations.AlterUniqueTogether(
            name='run',
            unique_together={('id', 'uuid'), ('id', 'is_finished'), ('id', 'priority'), (
                'id', 'start_at', 'end_at'), ('id', 'group'), ('id', 'run_set_result'), ('id', 'test_case_0')},
        ),
        migrations.AlterUniqueTogether(
            name='project',
            unique_together={('name', 'version'), ('id', 'name')},
        ),
        migrations.CreateModel(
            name='NotificationEmailNotificationTargetLink',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('email_notification_target', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.emailnotificationtarget')),
                ('notification', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.notification')),
            ],
            options={
                'db_table': 'notification_email_notification_target_link',
                'unique_together': {('notification', 'email_notification_target')},
            },
        ),
        migrations.CreateModel(
            name='InstructionTypeElementTypeLink',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('element_type', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.elementtype')),
                ('instruction_type', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.instructiontype')),
            ],
            options={
                'db_table': 'instruction_type_element_type_link',
                'unique_together': {('instruction_type', 'element_type')},
            },
        ),
        migrations.CreateModel(
            name='InstructionOverwrite',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('test_case_id', models.BigIntegerField(blank=True, null=True)),
                ('data', models.JSONField()),
                ('log', models.TextField(blank=True, null=True)),
                ('copy_from_id', models.ForeignKey(blank=True, null=True,
                 on_delete=django.db.models.deletion.DO_NOTHING, to='api.instructionoverwrite')),
                ('element', models.ForeignKey(blank=True, null=True,
                 on_delete=django.db.models.deletion.DO_NOTHING, to='api.element')),
                ('instruction_id', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.instruction')),
                ('instruction_type', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING,
                 related_name='instruction_type', to='api.instructiontype')),
                ('overwrite_fields', models.ForeignKey(blank=True, db_column='overwrite_fields', null=True,
                 on_delete=django.db.models.deletion.DO_NOTHING, related_name='overwrite_fields', to='api.instructiontype')),
                ('test_case_overwrite', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.testcaseoverwrite')),
            ],
            options={
                'db_table': 'instruction_overwrite',
                'unique_together': {('test_case_overwrite', 'test_case_id', 'instruction_id'), ('test_case_overwrite', 'instruction_id', 'element')},
            },
        ),
        migrations.CreateModel(
            name='InstructionActionInstructionOptionLink',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('instruction_action', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.instructionaction')),
                ('instruction_option', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.instructionoption')),
            ],
            options={
                'db_table': 'instruction_action_instruction_option_link',
                'unique_together': {('instruction_action', 'instruction_option')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='instruction',
            unique_together={('id', 'ref_test_case'), ('id', 'test_case_share_folder_id'), ('id', 'element'), (
                'id', 'ref_test_case_overwrite'), ('id', 'application'), ('id', 'section'), ('id', 'element', 'instruction_type', 'test_case')},
        ),
        migrations.CreateModel(
            name='ElementTypeInstructionOptionLink',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('element_type', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.elementtype')),
                ('instruction_option', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.instructionoption')),
            ],
            options={
                'db_table': 'element_type_instruction_option_link',
                'unique_together': {('element_type', 'instruction_option')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='elementtypeinstructionactionlink',
            unique_together={('element_type', 'instruction_action')},
        ),
        migrations.AlterUniqueTogether(
            name='element',
            unique_together={('id', 'element_type'),
                             ('id', 'name'), ('name', 'section')},
        ),
        migrations.AlterUniqueTogether(
            name='drivertypeinstructiontypelink',
            unique_together={('driver_type', 'instruction_type')},
        ),
        migrations.CreateModel(
            name='DriverPropertyPredefinedValue',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('value', models.TextField()),
                ('comment', models.TextField(blank=True, null=True)),
                ('is_prefered', models.BooleanField()),
                ('driver_property', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.driverproperty')),
            ],
            options={
                'db_table': 'driver_property_predefined_value',
                'unique_together': {('value', 'driver_property')},
            },
        ),
        migrations.CreateModel(
            name='DriverPackDriverLink',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('driver_alias', models.TextField(blank=True, null=True)),
                ('driver', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.driver')),
                ('driver_pack', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='api.driverpack')),
            ],
            options={
                'db_table': 'driver_pack_driver_link',
                'unique_together': {('driver_pack', 'driver')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='application',
            unique_together={('id', 'project'),
                             ('id', 'name'), ('name', 'project')},
        ),
    ]
